@using BudgetOnline.UI.Models.SelectItems
@functions {

}
@helper Render(SelectItemsModel model, string propertyName, string cssClass, bool multiSelect, IDictionary<string, object> additionalValues)
    {
        var id = (propertyName ?? string.Empty).Replace(".", "_");
        if (model == null)
        {
    <select class="@cssClass">
    </select>
        }
        else if (multiSelect)
        {


            foreach (var item in model.Items)
            {
                //<option data-icon="@item.Icon" value="@item.Value" @(new HtmlString(item.Selected ? "selected='selected'" : string.Empty))>@item.Text</option>
    <div class="">
        <label class="checkbox form-inline">
            <input type="checkbox" id="@item.Value" value="@item.Value" @(new HtmlString(item.Selected ? "checked='checked'" : string.Empty))/>
            @item.Text
        </label>
    </div>
            }
    
            
@*@Html.DropDownList("", Model, new { @class = cssClass })*@
        }
        else
        {
    <select class="form-control @cssClass" id="@id" name="@propertyName" @(new HtmlString(multiSelect ? "multiple='multiple'" : string.Empty)) 
                @(new HtmlString(model.Required ? "required='required'" : string.Empty))>
        @foreach (var item in model.Items)
        {
            <option data-icon="@item.Icon" value="@item.Value" @(new HtmlString(item.Selected ? "selected='selected'" : string.Empty))>@item.Text</option>
        }
    </select>
            
@*@Html.DropDownList("", Model, new { @class = cssClass })*@
        }
}